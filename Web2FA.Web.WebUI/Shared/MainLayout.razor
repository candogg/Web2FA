@using Web2FA.Backend.Service.Services.Derived
@using Web2FA.Web.WebUI.Services.Interfaces
@using Web2FA.Backend.Shared.Extensions
@inherits LayoutComponentBase

@inject NavigationManager Navigation
@inject ITokenService TokenService

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Logout" Style="color: white;" OnClick="LogoutClicked" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Web2FA Login</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-8">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<MudMessageBox @ref="mbox" Title="Dikkat" CancelText="Vazgeç">
    <MessageContent>
        <MudText Class="mr-16">Çıkış yapmak istediğinizden emin misiniz?</MudText>
    </MessageContent>
    <YesButton>
        <MudButton Color="Color.Error" Variant="Variant.Filled" Style="width: 130px;" Class="ml-5" StartIcon="@Icons.Material.Filled.Logout">Çıkış Yap</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    private MudMessageBox? mbox { get; set; }

    bool _drawerOpen = true;
    private string? authenticationToken;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        authenticationToken = await TokenService.ControlTokenAsync();

        if (authenticationToken.IsNullOrEmpty())
        {
            Navigation.NavigateTo("/login");

            return;
        }

        var tokenInfo = await TokenService.GetClaimAsync();

        if (tokenInfo == default || tokenInfo == null)
        {
            Navigation.NavigateTo("/login");

            return;
        }

        await base.OnInitializedAsync();
    }

    private async void LogoutClicked()
    {
        if (mbox == null) return;

        bool? result = await mbox.Show();

        if (result == true)
        {
            await TokenService.RemoveTokenAsync();

            Navigation.NavigateTo("/login");
        }
    }
}